- name: Check namespace
  k8s_facts:
    host: "{{ url }}"
    api_key: "{{ admin_token }}"
    verify_ssl: no
    kind: Namespace
    name: "{{ namespace }}"
  register: ns

- name: Create namespace
  shell: "{{ oc_binary }} --server {{ url }} --token {{ token }} new-project {{ namespace }} --skip-config-write=true"
  when: ns.resources | length == 0

- name: Deploy a mysql node
  k8s:
    host: "{{ url }}"
    api_key: "{{ token }}"
    verify_ssl: no
    state : present
    definition: "{{ lookup('template', 'deployment.yml.j2' )}}"
  vars:
    storage_class: "{{ src_storage_class if src_storage_class is defined else 'default' }}"

- name: Check nodes status
  k8s_facts:
    host: "{{ url }}"
    api_key: "{{ token }}"
    verify_ssl: no
    kind: Pod
    namespace: "{{ namespace }}"
    label_selectors: "app={{ app_name }}"
    field_selectors: 
    - status.phase=Running
  register: pod
  until: "true in (pod | json_query('resources[].status.containerStatuses[].ready'))"
  retries: 30

- name: Copy mysql provision script to pod
  shell: "{{ oc_binary }} --server {{ url }} --token {{ token }}  -n {{ namespace }} cp {{ role_path }}/files/data.sql {{ (pod.resources|first).metadata.name }}:/opt/app-root/src/"
  register: result
  retries: 10
  until: result.rc == 0

- name: Wait until service ready for connections
  shell: "{{ oc_binary }} --server {{ url }} --token {{ token }} -n {{ namespace }} logs {{ (pod.resources|first).metadata.name }}"
  register: result
  until: result.stdout is search( 'socket.*/var/lib/mysql/mysql.sock.*port.*3306  MySQL Community Server \\(GPL\\)')
  retries: 15

- name: Provision the mysql database
  shell: "{{ oc_binary }} --server {{ url }} --token {{ token }} -n {{ namespace }} exec  {{ (pod.resources|first).metadata.name }} -- /bin/bash -c 'mysql -uMYSQL_USER -pMYSQL_PASSWORD MYSQL_DATABASE < /opt/app-root/src/data.sql'"
